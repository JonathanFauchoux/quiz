{"remainingRequest":"/Users/jfa/Desktop/quiz/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jfa/Desktop/quiz/src/components/Question/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/jfa/Desktop/quiz/src/components/Question/index.vue","mtime":1557482405052},{"path":"/Users/jfa/Desktop/quiz/node_modules/css-loader/index.js","mtime":1556006305160},{"path":"/Users/jfa/Desktop/quiz/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1556006305280},{"path":"/Users/jfa/Desktop/quiz/node_modules/postcss-loader/src/index.js","mtime":1556006305252},{"path":"/Users/jfa/Desktop/quiz/node_modules/sass-loader/lib/loader.js","mtime":1556006306811},{"path":"/Users/jfa/Desktop/quiz/node_modules/cache-loader/dist/cjs.js","mtime":1556006305133},{"path":"/Users/jfa/Desktop/quiz/node_modules/vue-loader/lib/index.js","mtime":1556006305280}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.panel-body{\n  display: flex;\n  padding: 5rem;\n  .btn{\n    padding:1.5rem 2.5rem;\n    font-size: 2rem;\n    background-color: colors(primary);\n    border: 1px solid transparent;\n    transition: all .5s ease;\n    &:hover{\n      color: colors(primary);\n      background-color: white;\n      border: 1px solid colors(primary);\n    }\n  }\n}\n.panel-title{\n  padding: 2rem;\n  position: relative;\n  right: 1.5rem;\n}\n.panel-heading{\n  border-bottom: 1px solid gainsboro;\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Question","sourcesContent":["<template>\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title text-center\">{{ question }}</h3>\n      </div>\n      <div class=\"panel-body row\">\n        <div class=\"col-xs-12 col-sm-6 text-center\">\n          <button class=\"btn btn-primary btn-lg\" style=\"margin: 1rem;\" @click=\"onAnswer(btnData[0].correct)\"> {{btnData[0].answer}} </button>\n        </div>\n        <div class=\"col-xs-12 col-sm-6 text-center\">\n          <button class=\"btn btn-primary btn-lg\" style=\"margin: 1rem;\" @click=\"onAnswer(btnData[1].correct)\"> {{btnData[1].answer}} </button>\n        </div>\n        <div class=\"col-xs-12 col-sm-6 text-center\">\n          <button class=\"btn btn-primary btn-lg\" style=\"margin: 1rem;\" @click=\"onAnswer(btnData[2].correct)\"> {{btnData[2].answer}} </button>\n        </div>\n        <div class=\"col-xs-12 col-sm-6 text-center\">\n          <button class=\"btn btn-primary btn-lg\" style=\"margin: 1rem;\" @click=\"onAnswer(btnData[3].correct)\"> {{btnData[3].answer}} </button>\n        </div>\n      </div>\n    </div>\n\n</template>\n\n<script>\nconst MODE_ADDITION = 1\nconst MODE_SUBSTRACTION = 2\nexport default {\n  name: 'Question',\n  data () {\n    return {\n      question: 'Oops, an error ocurred :/',\n      btnData: [\n        { correct: true, answer: 0 },\n        { correct: false, answer: 0 },\n        { correct: false, answer: 0 },\n        { correct: false, answer: 0 }\n      ]\n    }\n  },\n  components: {},\n  computed: {},\n  created () {\n    this.generateQuestion()\n  },\n  methods: {\n    generateQuestion () {\n      const firstNumber = this.generateRandomNumber(1, 30)\n      const secondNumber = this.generateRandomNumber(1, 30)\n      const modeNumber = this.generateRandomNumber(1, 2)\n      let correctAnswer = 0\n\n      switch (modeNumber) {\n        case MODE_ADDITION:\n          console.log(firstNumber)\n          correctAnswer = firstNumber + secondNumber\n          this.question = 'Résultat de  : ' + firstNumber + ' + ' + secondNumber + ' ?'\n          break\n        case MODE_SUBSTRACTION:\n          correctAnswer = firstNumber - secondNumber\n          this.question = 'Résultat de : ' + firstNumber + ' - ' + secondNumber + ' ?'\n          break\n        default:\n          correctAnswer = 0\n          this.question = 'Oops, il y a une erreur :/'\n      }\n      this.btnData[0].answer = this.generateRandomNumber(correctAnswer - 10, correctAnswer + 10, correctAnswer)\n      this.btnData[0].correct = false\n      this.btnData[1].answer = this.generateRandomNumber(correctAnswer - 10, correctAnswer + 10, correctAnswer)\n      this.btnData[1].correct = false\n      this.btnData[2].answer = this.generateRandomNumber(correctAnswer - 10, correctAnswer + 10, correctAnswer)\n      this.btnData[2].correct = false\n      this.btnData[3].answer = this.generateRandomNumber(correctAnswer - 10, correctAnswer + 10, correctAnswer)\n      this.btnData[3].correct = false\n\n      const correctButton = this.generateRandomNumber(0, 3)\n      this.btnData[correctButton].correct = true\n      this.btnData[correctButton].answer = correctAnswer\n    },\n    generateRandomNumber (min, max, except) {\n      const rndNumber = Math.round(Math.random() * (max - min)) + min\n      // console.log(min, max, rndNumber)\n      if (rndNumber === except) {\n        return this.generateRandomNumber(min, max, except)\n      }\n      return rndNumber\n    },\n    onAnswer (isCorrect) {\n      this.$emit('answered', isCorrect)\n    }\n  }\n}\n</script>\n<style lang=\"scss\">\n.panel-body{\n  display: flex;\n  padding: 5rem;\n  .btn{\n    padding:1.5rem 2.5rem;\n    font-size: 2rem;\n    background-color: colors(primary);\n    border: 1px solid transparent;\n    transition: all .5s ease;\n    &:hover{\n      color: colors(primary);\n      background-color: white;\n      border: 1px solid colors(primary);\n    }\n  }\n}\n.panel-title{\n  padding: 2rem;\n  position: relative;\n  right: 1.5rem;\n}\n.panel-heading{\n  border-bottom: 1px solid gainsboro;\n}\n</style>\n"]}]}
{"remainingRequest":"/Users/jfa/Desktop/quiz/node_modules/babel-loader/lib/index.js!/Users/jfa/Desktop/quiz/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/jfa/Desktop/quiz/src/api/modules/page.js","dependencies":[{"path":"/Users/jfa/Desktop/quiz/src/api/modules/page.js","mtime":1555671620000},{"path":"/Users/jfa/Desktop/quiz/node_modules/cache-loader/dist/cjs.js","mtime":1556006305133},{"path":"/Users/jfa/Desktop/quiz/node_modules/babel-loader/lib/index.js","mtime":1556006302627},{"path":"/Users/jfa/Desktop/quiz/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1556006304591}],"contextDependencies":[],"result":["import _Promise from \"/Users/jfa/Desktop/quiz/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport { fetchGetService } from '@helpers/api';\nvar mode = process.env.NODE_ENV;\nexport default {\n  getPageContent: function getPageContent(name) {\n    var service = mode === 'development' ? \"\".concat(name, \".json\") : \"\".concat(name);\n    return new _Promise(function (resolve, reject) {\n      fetchGetService(service).then(function (response) {\n        resolve(response.data);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n};",{"version":3,"sources":["/Users/jfa/Desktop/quiz/src/api/modules/page.js"],"names":["fetchGetService","mode","process","env","NODE_ENV","getPageContent","name","service","resolve","reject","then","response","data","catch","error"],"mappings":";AAAA,SAASA,eAAT,QAAgC,cAAhC;AAEA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAzB;AAEA,eAAe;AACbC,EAAAA,cADa,0BACGC,IADH,EACS;AACpB,QAAMC,OAAO,GAAIN,IAAI,KAAK,aAAV,aAA8BK,IAA9B,uBAA+CA,IAA/C,CAAhB;AACA,WAAO,aAAY,UAACE,OAAD,EAAUC,MAAV,EAAqB;AACtCT,MAAAA,eAAe,CAACO,OAAD,CAAf,CAAyBG,IAAzB,CAA8B,UAACC,QAAD,EAAc;AAC1CH,QAAAA,OAAO,CAACG,QAAQ,CAACC,IAAV,CAAP;AACD,OAFD,EAEGC,KAFH,CAES,UAAAC,KAAK,EAAI;AAChBL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACD,OAJD;AAKD,KANM,CAAP;AAOD;AAVY,CAAf","sourcesContent":["import { fetchGetService } from '@helpers/api'\n\nconst mode = process.env.NODE_ENV\n\nexport default {\n  getPageContent (name) {\n    const service = (mode === 'development') ? `${name}.json` : `${name}`\n    return new Promise((resolve, reject) => {\n      fetchGetService(service).then((response) => {\n        resolve(response.data)\n      }).catch(error => {\n        reject(error)\n      })\n    })\n  }\n}\n"]}]}